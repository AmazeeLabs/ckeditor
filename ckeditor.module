<?php

// $Id$
/**
 * CKEditor - The text editor for Internet - http://ckeditor.com
 * Copyright (c) 2003-2009, CKSource - Frederico Knabben. All rights reserved.
 *
 * == BEGIN LICENSE ==
 *
 * Licensed under the terms of any of the following licenses at your
 * choice:
 *
 *  - GNU General Public License Version 2 or later (the "GPL")
 *    http://www.gnu.org/licenses/gpl.html
 *
 *  - GNU Lesser General Public License Version 2.1 or later (the "LGPL")
 *    http://www.gnu.org/licenses/lgpl.html
 *
 *  - Mozilla Public License Version 1.1 or later (the "MPL")
 *    http://www.mozilla.org/MPL/MPL-1.1.html
 *
 * == END LICENSE ==
 *
 * @file
 * CKEditor Module for Drupal 7.x
 *
 * This module allows Drupal to replace textarea fields with CKEditor.
 *
 * This HTML text editor brings to the web many of the powerful functionalities
 * of known desktop editors like Word. It's really  lightweight and doesn't
 * require any kind of installation on the client computer.
 */
/**
 * The name of simplified toolbar which should be forced
 * Be sure that this toolbar is defined in ckeditor.config.js or fckconfig.js
 */
define('CKEDITOR_FORCE_SIMPLE_TOOLBAR_NAME', 'DrupalBasic');
define('CKEDITOR_ENTERMODE_P', 1);
define('CKEDITOR_ENTERMODE_BR', 2);
define('CKEDITOR_ENTERMODE_DIV', 3);

global $_ckeditor_configuration;
global $_ckeditor_ids;

$_ckeditor_configuration = array();
$_ckeditor_ids = array();

/**
 * Implementation of hook_menu().
 */
function ckeditor_menu() {
    $items = array();

    $items['ckeditor/xss'] = array(
        'title' => 'XSS Filter',
        'description' => 'XSS Filter.',
        'page callback' => 'ckeditor_filter_xss',
        'file' => 'includes/ckeditor.page.inc',
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/content/ckeditor'] = array(
        'title' => 'CKEditor',
        'description' => 'Configure the rich text editor.',
        'page callback' => 'ckeditor_admin_main',
        'file' => 'includes/ckeditor.admin.inc',
        'access arguments' => array('administer ckeditor'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/config/content/ckeditor/add'] = array(
        'title' => 'Add new CKEditor profile',
        'description' => 'Configure the rich text editor.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ckeditor_admin_profile_form'),
        'file' => 'includes/ckeditor.admin.inc',
        'access arguments' => array('administer ckeditor'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/content/ckeditor/clone/%ckeditor_profile'] = array(
        'title' => 'Clone CKEditor profile',
        'description' => 'Configure the rich text editor.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ckeditor_admin_profile_clone_form', 5),
        'file' => 'includes/ckeditor.admin.inc',
        'access arguments' => array('administer ckeditor'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/content/ckeditor/edit/%ckeditor_profile'] = array(
        'title' => 'Edit CKEditor profile',
        'description' => 'Configure the rich text editor.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ckeditor_admin_profile_form', 5),
        'file' => 'includes/ckeditor.admin.inc',
        'access arguments' => array('administer ckeditor'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/content/ckeditor/delete/%ckeditor_profile'] = array(
        'title' => 'Delete CKEditor profile',
        'description' => 'Configure the rich text editor.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ckeditor_admin_profile_delete_form', 5),
        'file' => 'includes/ckeditor.admin.inc',
        'access arguments' => array('administer ckeditor'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/content/ckeditor/addg'] = array(
        'title' => 'Add CKEditor Global profile',
        'description' => 'Configure the rich text editor.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ckeditor_admin_global_profile_form', 'add'),
        'file' => 'includes/ckeditor.admin.inc',
        'access arguments' => array('administer ckeditor'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/config/content/ckeditor/editg'] = array(
        'title' => 'Edit CKEditor Global profile',
        'description' => 'Configure the rich text editor.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ckeditor_admin_global_profile_form', 'edit'),
        'file' => 'includes/ckeditor.admin.inc',
        'access arguments' => array('administer ckeditor'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implementation of hook_permission()
 *
 * People -> Permissions
 */
function ckeditor_permission() {
    $arr = array();
    $arr['administer ckeditor'] = array(
            'title' => t('Administer CKEditor access'),
            'description' => t('Allow users to change CKEditor settings')
        );

    $arr['customize ckeditor'] = array(
            'title' => t('Customize CKEditor appearance'),
            'description' => t('Allow users to customize CKEditor appearance')
        );

    if (file_exists(drupal_get_path('module', 'ckeditor') . "/ckfinder")) {
        $arr['allow CKFinder file uploads'] = array(
            'title' => t('CKFinder access'),
            'description' => t('Allow users to use CKFinder')
        );
    }
    return $arr;
}

/**
 * Implementation of hook_help().
 *
 * This function delegates execution to ckeditor_help_delegate() in includes/ckeditor.page.inc to
 * lower the amount of code in ckeditor.module
 */
function ckeditor_help($path, $arg) {
    module_load_include('inc', 'ckeditor', 'includes/ckeditor.page');
    return module_invoke('ckeditor', 'help_delegate', $path, $arg);
}

/**
 * Implementation of hook_init().
 */
function ckeditor_init() {
    drupal_add_css(drupal_get_path('module', 'ckeditor') . '/ckeditor.css');
}

/**
 * Implementation of hook_form_alter()
 */
function ckeditor_form_alter(&$form, $form_state, $form_id) {
    if ( $form_id == 'user_profile_form'){
        module_load_include('inc', 'ckeditor', 'includes/ckeditor.user');

        ckeditor_user_customize($form, $form_state, $form_id);
    }
    if (substr($form_id, -10) == '_node_form') {
        $nodetype = $form['type']['#value'];
        if (!empty($form['body_field']['teaser_js']['#teaser'])) {
            $setting['ckeditor']['teaser'] = $form['body_field']['teaser_js']['#teaser'];
            drupal_add_js($setting, 'setting');
        }
    }
}

/**
 * Implementation of hook_element_info_alter().
 *
 * Replace textarea with CKEditor using callback function (ckeditor_pre_render_text_format)
 */
function ckeditor_element_info_alter(&$types) {
    $types['text_format']['#pre_render'][] = 'ckeditor_pre_render_text_format';
}

/**
 * This function create the HTML objects required for the CKEditor
 *
 * @param $element
 *   A fully populated form element to add the editor to
 * @return
 *   The same $element with extra CKEditor markup and initialization
 */
function ckeditor_pre_render_text_format($element) {
    static $is_running = FALSE;
    static $num = 1;
    static $processed_ids = array();
    global $user, $theme, $language, $_ckeditor_configuration, $_ckeditor_ids;
    $settings = array();
    $enabled = TRUE;
    $suffix = "";
    $class = array();
    
    if (!isset($element['#format'])){
        return $element;
    }

    $field = &$element['value'];

    //hack for module developers that want to disable ckeditor on their textareas
    if (key_exists('#wysiwyg', $element) && !$element['#wysiwyg']) {
        return $element;
    }

    if (isset($element['#access']) && !$element['#access']) {
        return $element;
    }

    if ($field['#id'] == "edit-log") {
        return $element;
    }

    if (isset($field['#attributes']['disabled']) && $field['#attributes']['disabled'] == 'disabled') {
        return $element;
    }
    
    if (isset($processed_ids[$field['#id']])) {
        $field['#attributes']['class'][] = $processed_ids[$field['#id']]['class'];
        if (empty($field['#suffix'])) {
            $field['#suffix'] = $processed_ids[$field['#id']]['suffix'];
        } else {
            $field['#suffix'] .= $processed_ids[$field['#id']]['suffix'];
        }
        return $element;
    } else {
        $processed_ids[$field['#id']] = array();
    }

    module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
    
    $global_profile = ckeditor_profile_load('CKEditor Global Profile');
    
    if ( $global_profile && isset($element["#format"]) && array_key_exists($element["#format"], $global_profile->input_formats) ) {
        $enabled = true;
    }
    
    if ($enabled) {
        $profile = ckeditor_get_profile($element['#format']);
        
        if ($profile) {
            $conf = array();
            $conf = $profile->settings;
            
            if (user_access('customize ckeditor')) {
                foreach (array('default', 'show_toggle', 'popup', 'skin', 'expand', 'width', 'lang', 'auto_lang') as $setting) {
                    $conf[$setting] = ckeditor_user_get_setting($user, $profile, $setting);
                }
            }
            if ($conf['popup'] == 't' && $conf['show_toggle'] == 't') {
                $conf['show_toggle'] = 'f';
            }
        } else {
            $enabled = FALSE;
        }
    }
    
    //old profile info, assume Filtered HTML is enabled
    if (!isset($conf['ss'])) {
        $conf['ss'] = 2;
        $conf['filters']['filter/0'] = 1;
    }
    if (!isset($conf['filters'])) {
        $conf['filters'] = array();
    }

    $themepath = path_to_theme() . '/';
    $host = base_path();
    if (!isset($field['#rows'])) {
        $field['#rows'] = 5;
    }
    // only replace textarea when it has enough rows and it is enabled
    if ($enabled && (($field['#rows'] > $conf['min_rows']) || ($conf['min_rows'] <= 1 && empty($field['#rows'])))) {
        $textarea_id = $field['#id'];
        $class[] = 'ckeditor-mod';
        $_ckeditor_ids[] = $textarea_id;
        $ckeditor_on = ($conf['default'] == 't') ? 1 : 0;

        $xss_check = 0;
        //it's not a problem when adding new content/comment
        if (arg(1) != "add" && arg(1) != "reply") {
            $_ckeditor_configuration[$field['#id']] = $conf;

            //let ckeditor know when perform XSS checks auto/manual
            if ($conf['ss'] == 1) {
                $xss_class = 'checkxss1';
            } else {
                $xss_class = 'checkxss2';
            }

            $class[]= $xss_class;
            $xss_check = 1;
        }

        //settings are saved as strings, not booleans
        if ($conf['show_toggle'] == 't') {
            $content = '';
            if (isset($element['#post']['teaser_js'])) {
                $content .= $element['#post']['teaser_js'] . '<!--break-->';
            }
            if (isset($element['#value'])) {
                $content .= $element['#value'];
            }
            $wysiwyg_link = '';
            $wysiwyg_link .= "<a class=\"ckeditor_links\" style=\"display:none\" href=\"javascript:Drupal.ckeditorToggle('{$textarea_id}','" . str_replace("'", "\\'", t('Switch to plain text editor')) . "','" . str_replace("'", "\\'", t('Switch to rich text editor')) . "'," . $xss_check . ");\" id=\"switch_{$textarea_id}\">";
            $wysiwyg_link .= $ckeditor_on ? t('Switch to plain text editor') : t('Switch to rich text editor');
            $wysiwyg_link .= '</a>';

            // Make sure to append to #suffix so it isn't completely overwritten
            $suffix .= $wysiwyg_link;
        }
        // setting some variables
        $module_drupal_path = drupal_get_path('module', 'ckeditor');
        $module_full_path = $host . $module_drupal_path;
        $editor_path = ckeditor_path(FALSE);
        $editor_local_path = ckeditor_path(TRUE);
        // get the default drupal files path
        $files_path = $host . variable_get('file_private_path', conf_path() . '/files');

        // sensible default for small toolbars
        if (isset($field['#rows'])) {
            $height = intval($field['#rows']) * 14 + 140;
        } else {
            $height = 400;
        }
        
        if (!$is_running) {
            drupal_add_js($module_drupal_path . '/includes/ckeditor.utils.js', array( 'type' => 'file', 'scope' => variable_get('preprocess_js', FALSE) ? 'header' : 'footer') );
            
            if ($conf['popup'] != 't') {
                if (isset($conf['ckeditor_load_method'])) {
                    drupal_add_js( $editor_path . '/' . $conf['ckeditor_load_method'], 'file');
                    if ($conf['ckeditor_load_method'] == 'ckeditor_basic.js') {
                        drupal_add_js('CKEDITOR.loadFullCoreTimeout = ' . $conf['ckeditor_load_time_out'] . ';', 'inline');
                        drupal_add_js(array('ckeditor' => array('load_timeout' => TRUE)), 'setting');
                    }
                } else {
                    drupal_add_js($editor_path . '/ckeditor.js', 'file');
                }
            } else {
                drupal_add_js($editor_path . '/ckeditor_basic.js', 'file');
            }
            drupal_add_js(array('ckeditor' => array('module_path' => $module_full_path)), 'setting');
            if ($conf['popup'] == 't') {
                drupal_add_js(array('ckeditor' => array('editor_path' => $editor_path)), 'setting');
            }
            if (module_exists('paging')) {
                drupal_add_js(array('ckeditor' => array('pagebreak' => TRUE)), 'setting');
            }
            if (module_exists('linktocontent_node')) {
                drupal_add_js(array('ckeditor' => array('linktocontent_node' => TRUE)), 'setting');
            }
            if (module_exists('linktocontent_menu')) {
                drupal_add_js(array('ckeditor' => array('linktocontent_menu' => TRUE)), 'setting');
            }
            if (module_exists('pagebreak')) {
                drupal_add_js(array('ckeditor' => array('pagebreak' => TRUE)), 'setting');
            }
            if (function_exists('linktocontent_node_menu')) {
                if (!empty($global_conf['linktoc']) && $global_conf['linktoc'] != 'p') {
                    drupal_add_js(array('ckeditor' => array('linktocontent_node_path_filter' => TRUE)), 'setting');
                    if ($global_conf['linktoc'] == 'pn') {
                        drupal_add_js(array('ckeditor' => array('linktocontent_node_select_type' => TRUE)), 'setting');
                    }
                }
            }
            $is_running = TRUE;
        }

        $toolbar = $conf['toolbar'];

        if (!empty($conf['theme_config_js']) && $conf['theme_config_js'] == 't' && file_exists($themepath . 'ckeditor.config.js')) {
            $ckeditor_config_path = $host . $themepath . 'ckeditor.config.js?' . @filemtime($themepath . 'ckeditor.config.js');
        } else {
            $ckeditor_config_path = $module_full_path . "/ckeditor.config.js?" . @filemtime($module_drupal_path . "/ckeditor.config.js");
        }

        $settings[$textarea_id]['customConfig'] = $ckeditor_config_path;
        $settings[$textarea_id]['defaultLanguage'] = $conf['lang'];
        $settings[$textarea_id]['toolbar'] = $toolbar;
        $settings[$textarea_id]['enterMode'] = constant("CKEDITOR_ENTERMODE_" . strtoupper($conf['enter_mode']));
        $settings[$textarea_id]['shiftEnterMode'] = constant("CKEDITOR_ENTERMODE_" . strtoupper($conf['shift_enter_mode']));
        $settings[$textarea_id]['toolbarStartupExpanded'] = ( $conf['expand'] == 't' );
        $settings[$textarea_id]['customConfig'] = $ckeditor_config_path;
        $settings[$textarea_id]['width'] = $conf['width'];
        $settings[$textarea_id]['height'] = $height;
        $settings[$textarea_id]['skin'] = $conf['skin'];
        $settings[$textarea_id]['format_tags'] = $conf['font_format'];
        if (isset($conf['language_direction'])) {
            switch ($conf['language_direction']) {
                case 'default':
                    if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL) {
                        $settings[$textarea_id]['contentsLangDirection'] = 'rtl';
                    }
                    break;
                case 'ltr':
                    $settings[$textarea_id]['contentsLangDirection'] = 'ltr';
                    break;
                case 'rtl':
                    $settings[$textarea_id]['contentsLangDirection'] = 'rtl';
                    break;
            }
        }
        if (isset($conf['scayt_autoStartup']) && $conf['scayt_autoStartup'] == 't') {
            $settings[$textarea_id]['scayt_autoStartup'] = TRUE;
        } else {
            $settings[$textarea_id]['scayt_autoStartup'] = FALSE;
        }
        if ($conf['auto_lang'] == "f") {
            $settings[$textarea_id]['language'] = $conf['lang'];
        }
        if (isset($conf['forcePasteAsPlainText']) && $conf['forcePasteAsPlainText'] == 't') {
            $settings[$textarea_id]['forcePasteAsPlainText'] = TRUE;
        }
        if (isset($conf['custom_formatting']) && $conf['custom_formatting'] == 't') {
            foreach ($conf['formatting']['custom_formatting_options'] as $k => $v) {
                if ($v === 0) {
                    $conf['formatting']['custom_formatting_options'][$k] = FALSE;
                } else {
                    $conf['formatting']['custom_formatting_options'][$k] = TRUE;
                }
            }
            $settings[$textarea_id]['output_pre_indent'] = $conf['formatting']['custom_formatting_options']['pre_indent'];
            unset($conf['formatting']['custom_formatting_options']['pre_indent']);
            $settings[$textarea_id]['custom_formatting'] = $conf['formatting']['custom_formatting_options'];
        }
        // add code for filebrowser for users that have access
        $filebrowser = !empty($conf['filebrowser']) ? $conf['filebrowser'] : 'none';
        $filebrowser_image = !empty($conf['filebrowser_image']) ? $conf['filebrowser_image'] : $filebrowser;
        $filebrowser_flash = !empty($conf['filebrowser_flash']) ? $conf['filebrowser_flash'] : $filebrowser;

        if ($filebrowser == 'imce' && !module_exists('imce')) {
            $filebrowser = 'none';
        }

        if ($filebrowser == 'tinybrowser' && !module_exists('tinybrowser')) {
            $filebrowser = 'none';
        }

        if ($filebrowser == 'ib' && !module_exists('imagebrowser')) {
            $filebrowser = 'none';
        }
        if ($filebrowser == 'webfm' && !module_exists('webfm_popup')) {
            $filebrowser = 'none';
        }

        if ($filebrowser_image != $filebrowser) {
            if ($filebrowser_image == 'imce' && !module_exists('imce')) {
                $filebrowser_image = $filebrowser;
            }
            if ($filebrowser_image == 'tinybrowser' && !module_exists('tinybrowser')) {
                $filebrowser_image = $filebrowser;
            }
            if ($filebrowser_image == 'ib' && !module_exists('imagebrowser')) {
                $filebrowser_image = $filebrowser;
            }
            if ($filebrowser_image == 'webfm' && !module_exists('webfm_popup')) {
                $filebrowser_image = $filebrowser;
            }
        }

        if ($filebrowser_flash != $filebrowser) {
            if ($filebrowser_flash == 'imce' && !module_exists('imce')) {
                $filebrowser_flash = $filebrowser;
            }
            if ($filebrowser_image == 'tinybrowser' && !module_exists('tinybrowser')) {
                $filebrowser_flash = $filebrowser;
            }
            if ($filebrowser_flash == 'ib' && !module_exists('imagebrowser')) {
                $filebrowser_flash = $filebrowser;
            }
            if ($filebrowser_flash == 'webfm' && !module_exists('webfm_popup')) {
                $filebrowser_flash = $filebrowser;
            }
        }

        if ($filebrowser == 'ckfinder' || $filebrowser_image == 'ckfinder' || $filebrowser_flash == 'ckfinder') {
            if (user_access('allow CKFinder file uploads')) {
                if (!empty($profile->settings['UserFilesPath'])) {
                    $_SESSION['ckeditor']['UserFilesPath'] = strtr($profile->settings['UserFilesPath'], array("%f" => variable_get('file_private_path', conf_path() . '/files'), "%u" => $user->uid, "%b" => $host, "%n" => $user->name));
                }
                if (!empty($profile->settings['UserFilesAbsolutePath'])) {
                    $_SESSION['ckeditor']['UserFilesAbsolutePath'] = strtr($profile->settings['UserFilesAbsolutePath'], array("%f" => variable_get('file_private_path', conf_path() . '/files'), "%u" => $user->uid, "%b" => base_path(), "%d" => $_SERVER['DOCUMENT_ROOT'], "%n" => $user->name));
                }
                //@todo DOWNLOAD API
                $private_dir = isset($global_profile->settings['private_dir']) ? trim($global_profile->settings['private_dir'], '\/') : '';
                if (!empty($private_dir)) {
                    $private_dir = strtr($private_dir, array('%u' => $user->uid, '%n' => $user->name));
                    $_SESSION['ckeditor']['UserFilesPath'] = base_path() . variable_get('file_private_path', conf_path() . '/files') . '/' . $private_dir . '/';
                    $_SESSION['ckeditor']['UserFilesAbsolutePath'] = realpath(variable_get('file_private_path', conf_path() . '/files')) . DIRECTORY_SEPARATOR . $private_dir . DIRECTORY_SEPARATOR;
                } else {
                    $_SESSION['ckeditor']['UserFilesPath'] = base_path() . variable_get('file_private_path', conf_path() . '/files') . '/';
                    $_SESSION['ckeditor']['UserFilesAbsolutePath'] = realpath(variable_get('file_private_path', conf_path() . '/files')) . DIRECTORY_SEPARATOR;
                }
            }
        }
        if (in_array('tinybrowser', array($filebrowser, $filebrowser_image, $filebrowser_flash))) {
            $popup_win_size = variable_get('tinybrowser_popup_window_size', '770x480');
            if (!preg_match('#\d+x\d+#is', $popup_win_size)) {
                $popup_win_size = '770x480';
            }
            $popup_win_size = trim($popup_win_size);
            $popup_win_size = strtolower($popup_win_size);
            $win_size = split('x', $popup_win_size);
        }

        switch ($filebrowser) {
            case 'ckfinder':
                if (user_access('allow CKFinder file uploads')) {
                    $settings[$textarea_id]['filebrowserBrowseUrl'] = $module_full_path . '/ckfinder/ckfinder.html';
                    $settings[$textarea_id]['filebrowserImageBrowseUrl'] = $module_full_path . '/ckfinder/ckfinder.html?Type=Images';
                    $settings[$textarea_id]['filebrowserFlashBrowseUrl'] = $module_full_path . '/ckfinder/ckfinder.html?Type=Flash';
                    $settings[$textarea_id]['filebrowserUploadUrl'] = $module_full_path . '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files';
                    $settings[$textarea_id]['filebrowserImageUploadUrl'] = $module_full_path . '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Images';
                    $settings[$textarea_id]['filebrowserFlashUploadUrl'] = $module_full_path . '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Flash';
                }
                break;
            case 'imce':
                $settings[$textarea_id]['filebrowserBrowseUrl'] = url('imce', array('query' => array('app' => 'ckeditor|sendto@ckeditorImceSendTo')));
                break;
            case 'webfm':
                if (user_access('access webfm')) {
                    $settings[$textarea_id]['filebrowserBrowseUrl'] = $host . "index.php?q=webfm_popup";
                }
                break;
            case 'ib':
                if (user_access('browse own images')) {
                    $settings[$textarea_id]['filebrowserBrowseUrl'] = $host . "index.php?q=imagebrowser/view/browser&app=ckeditor";
                    $settings[$textarea_id]['filebrowserWindowWidth'] = 700;
                    $settings[$textarea_id]['filebrowserWindowHeight'] = 520;
                }
                break;
            case 'tinybrowser':
                $settings[$textarea_id]['filebrowserBrowseUrl'] = $host . drupal_get_path('module', 'tinybrowser') . "/tinybrowser/tinybrowser.php?type=file";
                $settings[$textarea_id]['filebrowserWindowWidth'] = (int) $win_size[0] + 15;
                $settings[$textarea_id]['filebrowserWindowHeight'] = (int) $win_size[1] + 15;
                break;
        }

        if ($filebrowser_image != $filebrowser) {
            switch ($filebrowser_image) {
                case 'ckfinder':
                    if (user_access('allow CKFinder file uploads')) {
                        $settings[$textarea_id]['filebrowserImageBrowseUrl'] = $module_full_path . '/ckfinder/ckfinder.html?Type=Images';
                        $settings[$textarea_id]['filebrowserImageUploadUrl'] = $module_full_path . '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Images';
                    }
                    break;
                case 'imce':
                    $imcepath = drupal_get_path('module', 'imce');
                    drupal_add_js($imcepath . '/js/imce.js', 'file');
                    drupal_add_js($imcepath . '/js/imce_set_app.js', 'file');
                    $settings[$textarea_id]['filebrowserImageBrowseUrl'] = url('imce', array('query' => array('app' => 'ckeditor|sendto@ckeditorImceSendTo')));
                    break;
                case 'webfm':
                    if (user_access('access webfm')) {
                        $settings[$textarea_id]['filebrowserImageBrowseUrl'] = $host . "index.php?q=webfm_popup";
                    }
                    break;
                case 'ib':
                    if (user_access('browse own images')) {
                        $settings[$textarea_id]['filebrowserImageBrowseUrl'] = $host . "index.php?q=imagebrowser/view/browser&app=ckeditor";
                        $settings[$textarea_id]['filebrowserImageWindowWidth'] = 680;
                        $settings[$textarea_id]['filebrowserImageWindowHeight'] = 439;
                    }
                    break;
                case 'tinybrowser':
                    $settings[$textarea_id]['filebrowserImageBrowseUrl'] = $host . drupal_get_path('module', 'tinybrowser') . "/tinybrowser/tinybrowser.php?type=image";
                    $settings[$textarea_id]['filebrowserImageWindowWidth'] = (int) $win_size[0] + 15;
                    $settings[$textarea_id]['filebrowserImageWindowHeight'] = (int) $win_size[1] + 15;
                    break;
            }
        }

        if ($filebrowser_flash != $filebrowser) {
            switch ($filebrowser_flash) {
                case 'ckfinder':
                    if (user_access('allow CKFinder file uploads')) {
                        $settings[$textarea_id]['filebrowserFlashBrowseUrl'] = $module_full_path . '/ckfinder/ckfinder.html?Type=Images';
                        $settings[$textarea_id]['filebrowserFlashUploadUrl'] = $module_full_path . '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Images';
                    }
                    break;
                case 'imce':
                    $settings[$textarea_id]['filebrowserFlashBrowseUrl'] = url('imce', array('query' => array('app' => 'ckeditor|sendto@ckeditorImceSendTo')));
                    break;
                case 'webfm':
                    if (user_access('access webfm')) {
                        $settings[$textarea_id]['filebrowserFlashBrowseUrl'] = $host . "index.php?q=webfm_popup";
                    }
                    break;
                case 'ib':
                    if (user_access('browse own images')) {
                        $settings[$textarea_id]['filebrowserFlashBrowseUrl'] = $host . "index.php?q=imagebrowser/view/browser&app=ckeditor";
                        $settings[$textarea_id]['filebrowserFlashWindowWidth'] = 680;
                        $settings[$textarea_id]['filebrowserFlashWindowHeight'] = 439;
                    }
                    break;
                case 'tinybrowser':
                    $settings[$textarea_id]['filebrowserFlashBrowseUrl'] = $host . drupal_get_path('module', 'tinybrowser') . "/tinybrowser/tinybrowser.php?type=media";
                    $settings[$textarea_id]['filebrowserFlashWindowWidth'] = (int) $win_size[0] + 15;
                    $settings[$textarea_id]['filebrowserFlashWindowHeight'] = (int) $win_size[1] + 15;
                    break;
            }
        }

        if (!empty($conf['js_conf'])) {
            $lines = preg_split("/[\n\r]+/", $conf['js_conf']);
            foreach ($lines as $l) {
                //parsing lines with custom configuration
                preg_match_all('#(config\.)?(\w+)[ ]*=(.+)[;]?#is', $l, $matches);
                if (!empty($matches[0])) {
                    $value = trim($matches[3][0], " ;'\"\n\r\t\0\x0B");
                    if (strcasecmp($value, 'true') == 0) {
                        $value = TRUE;
                    }
                    if (strcasecmp($value, 'false') == 0) {
                        $value = FALSE;
                    }
                    $settings[$textarea_id][$matches[2][0]] = $value;
                }
            }
        }

        $settings[$textarea_id]['stylesCombo_stylesSet'] = "drupal:" . $module_full_path . '/ckeditor.styles.js';
        if (!empty($conf['css_style'])) {
            if ($conf['css_style'] == 'theme' && file_exists($themepath . 'ckeditor.styles.js')) {
                $settings[$textarea_id]['stylesCombo_stylesSet'] = "drupal:" . $host . $themepath . 'ckeditor.styles.js';
            } elseif (!empty($conf['css_style']) && $conf['css_style'] == 'self') {
                $conf['styles_path'] = str_replace("%h%t", "%t", $conf['styles_path']);
                $settings[$textarea_id]['stylesCombo_stylesSet'] = "drupal:" . str_replace(array('%h', '%t', '%m'), array($host, $host . $themepath, $module_drupal_path), $conf['styles_path']);
            }
        }
        // add custom stylesheet if configured
        // lets hope it exists but we'll leave that to the site admin
        $query_string = '?' . substr(variable_get('css_js_query_string', '0'), 0, 1);
        $css_files = array();
        switch ($conf['css_mode']) {
            case 'theme':
                global $language, $theme_info, $base_theme_info;

                if (!empty($theme_info->stylesheets)) {
                    $editorcss = "\"";
                    foreach ($base_theme_info as $base) { // Grab stylesheets from base theme
                        if (!empty($base->stylesheets)) { // may be empty when the base theme reference in the info file is invalid
                            foreach ($base->stylesheets as $type => $stylesheets) {
                                if ($type != "print") {
                                    foreach ($stylesheets as $name => $path) {
                                        if (file_exists($path)) {
                                            $css_files[$name] = $host . $path . $query_string;
                                            // Grab rtl stylesheets ( will get rtl css files when thay are named with suffix "-rtl.css" (ex: fusion baased themes) )
                                            if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL && substr($path, 0, -8) != "-rtl.css") {
                                                $rtl_path = substr($path, 0, -4) . "-rtl.css";
                                                if (file_exists($rtl_path)) {
                                                    $css_files[$name . "-rtl"] = $host . $rtl_path . $query_string;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!empty($theme_info->stylesheets)) { // Grab stylesheets from current theme
                        foreach ($theme_info->stylesheets as $type => $stylesheets) {
                            if ($type != "print") {
                                foreach ($stylesheets as $name => $path) {
                                    if (file_exists($path)) {
                                        $css_files[$name] = $host . $path . $query_string;
                                        // Grab rtl stylesheets ( will get rtl css files when thay are named with suffix "-rtl.css" (ex: fusion baased themes) )
                                        if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL && substr($path, 0, -8) != "-rtl.css") {
                                            $rtl_path = substr($path, 0, -4) . "-rtl.css";
                                            if (file_exists($rtl_path)) {
                                                $css_files[$name . "-rtl"] = $host . $rtl_path . $query_string;
                                            }
                                        }
                                    } elseif (!empty($css_files[$name])) {
                                        unset($css_files[$name]);
                                    }
                                }
                            }
                        }
                    }
                    // Grab stylesheets local.css and local-rtl.css if they exist (fusion based themes)
                    if (file_exists($themepath . 'css/local.css')) {
                        $css_files[] = $host . $themepath . 'css/local.css' . $query_string;
                    }
                    if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL && file_exists($themepath . 'css/local-rtl.css')) {
                        $css_files[] = $host . $themepath . 'css/local-rtl.css' . $query_string;
                    }

                    // Grab stylesheets from color module
                    $color_paths = variable_get('color_' . $theme . '_stylesheets', array());
                    if (defined('LANGUAGE_RTL') && $language->direction == LANGUAGE_RTL) {
                        if (!empty($color_paths[1])) {
                            $css_files[] = $host . $color_paths[1] . $query_string;
                        }
                    } elseif (!empty($color_paths[0])) {
                        $css_files[] = $host . $color_paths[0] . $query_string;
                    }
                } else {
                    if (file_exists($themepath . 'style.css')) {
                        $css_files[] = $host . $themepath . 'style.css' . $query_string;
                    }
                }
                $css_files[] = $module_full_path . "/ckeditor.css" . $query_string;
                break;

            case 'self':
                if (file_exists($module_drupal_path . '/ckeditor.css')) {
                    $css_files[] = $module_full_path . '/ckeditor.css' . $query_string;
                }
                foreach (explode(',', $conf['css_path']) as $css_path) {
                    $css_path = trim(str_replace("%h%t", "%t", $css_path));
                    $css_files[] = str_replace(array('%h', '%t'), array($host, $host . $themepath), $css_path) . $query_string;
                }
                break;

            case 'none':
                if (file_exists($module_drupal_path . '/ckeditor.css')) {
                    $css_files[] = $module_full_path . '/ckeditor.css' . $query_string;
                }
                $css_files[] = $editor_path . '/contents.css' . $query_string;
                break;
        }
        if ($conf['ckeditor_load_method'] == 'ckeditor_source.js') {
            foreach ($css_files as $k => $v) {
                $css_files[$k] = $v . '&t=' . time();
            }
        }
        $settings[$textarea_id]['contentsCss'] = array_values($css_files);

        if ($ckeditor_on) {
            $autostart[$textarea_id] = TRUE;
        }

        if (!empty($conf['uicolor']) && $conf['uicolor'] == "custom" && !empty($conf['uicolor_user'])) {
            $settings[$textarea_id]['uiColor'] = $conf['uicolor_user'];
        }
        if (!empty($conf['uicolor']) && strpos($conf['uicolor'], "color_") === 0) {
            if (function_exists('color_get_palette')) {
                $palette = @color_get_palette($theme, FALSE); //[#652274]
                $color = str_replace("color_", "", $conf['uicolor']);
                if (!empty($palette[$color])) {
                    $settings[$textarea_id]['uiColor'] = $palette[$color];
                }
            }
        }

        drupal_add_js(array('ckeditor' => array('theme' => $theme)), 'setting');
        if (!empty($settings)) {
            drupal_add_js(array('ckeditor' => array('settings' => $settings)), 'setting');
        }
        if (!empty($autostart)) {
            drupal_add_js(array('ckeditor' => array('autostart' => $autostart)), 'setting');
        }

        if ($conf['popup'] == 't') {
            $suffix .= ' <span style="display:none" class="ckeditor_popuplink ckeditor_links">(<a href="#" onclick="return ckeditorOpenPopup(\'' . $textarea_id . '\', \'' . $field['#id'] . '\', \'' . $conf['width'] . '\');">' . t('Open rich text editor') . "</a>)</span>";
        }

        // Remember extra information and reuse it during "Preview"
        $processed_ids[$field['#id']]['suffix'] = $suffix;
        $processed_ids[$field['#id']]['class'] = $class;

        if (empty($field['#suffix'])) {
            $field['#suffix'] = $suffix;
        } else {
            $field['#suffix'] .= $suffix;
        }

        if (empty($field['#attributes']['class'])) {
            $field['#attributes']['class'] = $class;
        } else {
            $field['#attributes']['class'] = array_merge($field['#attributes']['class'], $class);
        }
        //hack with patch jquery-ui dialog

    }

    return $element;
}

/**
 * Implementation of hook_user().
 *
 * This function delegates execution to ckeditor_user_delegate() in includes/ckeditor.user.inc to
 * lower the amount of code in ckeditor.module
 */
function ckeditor_user($type, $edit, &$user, $category = NULL) {
    if (($type == 'form' && $category == 'account') || $type == 'validate') {
        module_load_include('inc', 'ckeditor', 'includes/ckeditor.user');
        return ckeditor_user_delegate($type, $edit, $user, $category);
    }
    return NULL;
}

/**
 * Load all profiles. Just load one profile if $name is passed in.
 */
function ckeditor_profile_load($name = '', $clear = FALSE) {
    static $profiles = array();

    if (empty($profiles) || $clear === TRUE) {
        $result = db_select('ckeditor_settings', 's')->fields('s')->execute();
        foreach ($result as $data) {
            $data->settings = unserialize($data->settings);
            $data->input_formats = array();

            $profiles[$data->name] = $data;
        }
        $input_formats = filter_formats();
        $result = db_select('ckeditor_input_format', 'f')->fields('f')->execute();
        foreach ($result as $data) {
            $profiles[$data->name]->input_formats[$data->format] = $input_formats[$data->format]->name;
        }
        
    }

    return ($name ? (isset($profiles[urldecode($name)]) ? $profiles[urldecode($name)] : FALSE) : $profiles);
}

/**
 * Read CKEditor path from Global profile
 *
 * @return
 *   path to CKEditor folder
 */
function ckeditor_path($local = FALSE, $refresh = FALSE) {
    static $cke_path;
    static $cke_local_path;

    if ($refresh || (!$cke_path)) {
        $mod_path = drupal_get_path('module', 'ckeditor');
        $global_profile = ckeditor_profile_load('CKEditor Global Profile', $refresh);

        //default: path to ckeditor subdirectory in the ckeditor module directory (starting from the document root)
        //e.g. for http://example.com/drupal it will be /drupal/sites/all/modules/ckeditor/ckeditor
        $cke_path = base_path() . $mod_path . '/ckeditor';

        //default: path to ckeditor subdirectory in the ckeditor module directory (relative to index.php)
        //e.g.: sites/all/modules/ckeditor/ckeditor
        $cke_local_path = $mod_path . '/ckeditor';

        if ($global_profile) {
            $gs = $global_profile->settings;

            if (isset($gs['ckeditor_path'])) {
                $tmp_path = $gs['ckeditor_path'];
                $tmp_path = strtr($tmp_path, array("%b" => base_path(), "%m" => base_path() . $mod_path));
                $tmp_path = str_replace('\\', '/', $tmp_path);
                $tmp_path = str_replace('//', '/', $tmp_path);
                $tmp_path = rtrim($tmp_path, ' \/');
                if (substr($tmp_path, 0, 1) != '/') {
                    $tmp_path = '/' . $tmp_path; //starts with '/'
                }
                $cke_path = $tmp_path;

                if (empty($gs['ckeditor_local_path'])) {
                    //fortunately wildcards are used, we can easily get the right server path
                    if (FALSE !== strpos($gs['ckeditor_path'], "%m")) {
                        $gs['ckeditor_local_path'] = strtr($gs['ckeditor_path'], array("%m" => $mod_path));
                    }
                    if (FALSE !== strpos($gs['ckeditor_path'], "%b")) {
                        $gs['ckeditor_local_path'] = strtr($gs['ckeditor_path'], array("%b" => "."));
                    }
                }
            }

            //ckeditor_path is defined, but wildcards are not used, we need to try to find out where is
            //the document root located and append ckeditor_path to it.
            if (!empty($gs['ckeditor_local_path'])) {
                $cke_local_path = $gs['ckeditor_local_path'];
            }
            elseif (!empty($gs['ckeditor_path'])) {
                module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
                $local_path = ckeditor_resolve_url($gs['ckeditor_path'] . "/");
                if (FALSE !== $local_path) {
                    $cke_local_path = $local_path;
                }
            }
        }
    }
    if ($local) {
        return $cke_local_path;
    }
    else {
        return $cke_path;
    }
}
